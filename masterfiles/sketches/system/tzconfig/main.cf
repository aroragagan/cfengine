body file control
{
      namespace => "cfdc_tzconfig";
}

# timezone should be a string representing the timezone
# At least in the linux distros I checked this should be
# relative to /usr/share/zoneinfo

bundle agent set(runenv, metadata, timezone, zoneinfo_dir)
{
##############################################################################
## Standard template for Design Center 3.6.0 sketches.                      ##
##############################################################################

  vars:
      "vars" slist => getindices(runenv);
      "$(vars)" string => "$(runenv[$(vars)])";
      # often you need a unique value for the current run through a
      # bundle, especially if you use if_repaired and such.  The
      # canon_prefix will give you that.
      "canon_prefix" string => canonify("$(prefix)");
      "dcbundle" string => concat("[$(metadata[name])] ", $(this.namespace), ':', $(this.bundle));
      "prefixes" slist => { "show", "exec", "path" };

    verbose::
      # pretty-print the authors and dependencies
      "dependencies" string => format("%S", "metadata[depends]");
      "authors" string => format("%S", "metadata[authors]");

    not_test::
      "exec_prefix" string => "", policy => "free";
      "show_prefix" string => "", policy => "free";
      "path_prefix" string => "", policy => "free";

    test::
      "exec_prefix" string => "$(default:paths.path[echo]) ", policy => "free";
      "show_prefix" string => "$(default:paths.path[grep]) . ", policy => "free";
      "path_prefix" string => "/tmp", policy => "free";

  classes:
      "$(vars)" expression => classmatch("$($(vars))");
      "not_$(vars)" not => classmatch("$($(vars))");
      "have_$(prefixes)_prefix" expression => isvariable("$(prefixes)_prefix");

  reports:
    verbose::
      "$(dcbundle): $(metadata[name]) license = $(metadata[license])";
      "$(dcbundle): $(metadata[name]) dependencies = $(dependencies)";
      "$(dcbundle): $(metadata[name]) version $(metadata[version]) by $(authors) starting up...";

      "$(dcbundle): imported environment var '$(vars)' with value '$($(vars))'";

      "$(dcbundle): imported environment class '$(vars)' because '$($(vars))' was true"
      ifvarclass => "$(vars)";

      "$(dcbundle): the $(prefixes)_prefix for runenv $(runenv) is '$($(prefixes)_prefix)'"
      ifvarclass => "have_$(prefixes)_prefix";

    verbose::
      # use the "verbose" context to show the sketch operation (for the user)
      "$(dcbundle): running in verbose mode";
    test::
       # use the "test" context to help debug the sketch (for the developer)
       "$(dcbundle): running in test mode";

##############################################################################
## end of template                                                          ##
##############################################################################

  vars:
      "tz_file" string => "$(zoneinfo_dir)/$(timezone)";

  classes:
      "timezone_exists" expression => fileexists("$(tz_file)");

  files:
    timezone_exists.(ubuntu|debian|gentoo)::
      "$(path_prefix)/etc/timezone"
      handle        => "tzconfig_files_etc_timezone",
      edit_defaults => default:empty,
      create        => "true",
      edit_line     => default:insert_lines("$(timezone)"),
      perms         => test_aware_mog("644", "root", "root"),
      comment       => "Debian and Gentoo based systems also use the /etc/timezone file";

    timezone_exists.(redhat|centos)::
      "$(path_prefix)/etc/sysconfig/clock"
      handle     => "tzconfig_files_etc_sysconfig_clock",
      create     => "true",
      edit_line  => default:replace_or_add("^ZONE=.*", 'ZONE="$(timezone)"'),
      perms      => test_aware_mog("644", "root", "root"),
      comment    => "Redhat like systems use /etc/sysconfig/clock for
the Time and Date Properties Tool
(system-config-date), and editing it does not
change the system timezone.";

    timezone_exists.linux::
      "$(path_prefix)/etc/localtime"
      handle            => "tzconfig_files_etc_localtime",
      copy_from         => cfdc_tzconfig:copy_zoneinfo("$(tz_file)"),
      classes           => default:if_repaired("tz_updated"),
      perms             => test_aware_mog("644", "root", "root"),
      move_obstructions => "true",
      comment           => "Copy the proper timezone file in place. We dont use
a symlink because that might cause problems across
different filesystems, it has been a bug in the past.";

  reports:
    !timezone_exists::
      "$(dcbundle): Unable to set invalid timezone $(timezone): file $(tz_file) does not exist.";

      "" bundle_return_value_index => "timezone";

    timezone_exists::
      "$(timezone)" bundle_return_value_index => "timezone";

    tz_updated::
      "$(dcbundle): System timezone updated to $(timezone)";
}

body copy_from copy_zoneinfo(source)
{
      # Copy the file any symlinks reference this is superiour to symlinking
      # There have been bugs in the past that cause things to not function
      # properly if /etc/localtime is a symlink to a different filesystem
      source => "$(source)";
      copylink_patterns => { ".*", };
      compare => "hash";
}

body perms test_aware_mog(mode, user, group)
# @brief Set the file's mode, owner and group based on the `test` class
# @param mode The new mode
# @param user The username of the new owner (if `test`, `$(this.promiser_uid)`)
# @param group The group name (if `test`, `$(this.promiser_gid)`)
{
    any::
      mode   => "$(mode)";
    not_test::
      owners => { "$(user)" };
      groups => { "$(group)" };
    test::
      owners => { $(this.promiser_uid) };
      groups => { $(this.promiser_gid) };
}
