body file control {

    namespace => "cfdc_password_expiration";
    inputs => {"$(sys.workdir)/inputs/lib/3.6/common.cf", "$(sys.workdir)/inputs/lib/3.6/files.cf"};
}

bundle agent password_expiration(runenv, metadata, pass_max_days, pass_min_days, pass_warn_age, min_uid, skipped_users, skipped_uids) {
##############################################################################
## Standard template for Design Center 3.6.0 sketches.                      ##
##############################################################################

  vars:
      "vars" slist => getindices(runenv);
      "$(vars)" string => "$(runenv[$(vars)])";
      # often you need a unique value for the current run through a
      # bundle, especially if you use if_repaired and such.  The
      # canon_prefix will give you that.
      "canon_prefix" string => canonify("$(prefix)");
      "dcbundle" string => concat("[$(metadata[name])] ", $(this.namespace), ':', $(this.bundle));
      "prefixes" slist => { "show", "exec", "path" };

    verbose::
      # pretty-print the authors and dependencies
      "dependencies" string => format("%S", "metadata[depends]");
      "authors" string => format("%S", "metadata[authors]");

    not_test::
      "exec_prefix" string => "", policy => "free";
      "show_prefix" string => "", policy => "free";
      "path_prefix" string => "", policy => "free";

    test::
      "exec_prefix" string => "$(default:paths.path[echo]) ", policy => "free";
      "show_prefix" string => "$(default:paths.path[grep]) . ", policy => "free";
      "path_prefix" string => "/tmp", policy => "free";

  classes:
      "$(vars)" expression => classmatch("$($(vars))");
      "not_$(vars)" not => classmatch("$($(vars))");
      "have_$(prefixes)_prefix" expression => isvariable("$(prefixes)_prefix");

  reports:
    verbose::
      "$(dcbundle): $(metadata[name]) license = $(metadata[license])";
      "$(dcbundle): $(metadata[name]) dependencies = $(dependencies)";
      "$(dcbundle): $(metadata[name]) version $(metadata[version]) by $(authors) starting up...";

      "$(dcbundle): imported environment var '$(vars)' with value '$($(vars))'";

      "$(dcbundle): imported environment class '$(vars)' because '$($(vars))' was true"
      ifvarclass => "$(vars)";

      "$(dcbundle): the $(prefixes)_prefix for runenv $(runenv) is '$($(prefixes)_prefix)'"
      ifvarclass => "have_$(prefixes)_prefix";

    verbose::
      # use the "verbose" context to show the sketch operation (for the user)
      "$(dcbundle): running in verbose mode";
    test::
       # use the "test" context to help debug the sketch (for the developer)
       "$(dcbundle): running in test mode";

##############################################################################
## end of template                                                          ##
##############################################################################


    vars:
    "logindefs[PASS_MAX_DAYS]" string => "$(pass_max_days)";
    "logindefs[PASS_MIN_DAYS]" string => "$(pass_min_days)";
    "logindefs[PASS_WARN_AGE]" string => "$(pass_warn_age)";

    "fieldnum[PASS_MAX_DAYS]" string => "4";
    "fieldnum[PASS_MIN_DAYS]" string => "5";
    "fieldnum[PASS_WARN_AGE]" string => "6";

    
    "users" slist  => getusers("$(skipped_users)", "$(skipped_uids)");
    "cusers[$(users)]" string  => canonify("$(users)");
    "params" slist => getindices("logindefs");
    
    classes:
    "skipped_$(cusers[$(users)])" expression => islessthan(getuid("$(user)"), "$(min_uid)");

    files:
    linux::
    "/root/learn_cfengine/login.defs"
    edit_line => default:set_config_values("cfdc_password_expiration:password_expiration.logindefs");

    "/root/learn_cfengine/shadow"
    edit_defaults => default:backup_timestamp,
    edit_line => default:set_user_field("$(users)", "$(fieldnum[$(params)])", "$(logindefs[$(params)])"),
    ifvarclass => "!skipped_$(cusers[$(users)])";

    reports:
    !linux::
    "warning: security password expiration only works on linux";

}
