body file control
{
      namespace => "cfdc_sketch_template";
}

bundle agent entry(runenv, metadata, prefix, myboolean, mytype, myip, mylist, myarray)
{
##############################################################################
## Standard template for Design Center 3.6.0 sketches.                      ##
##############################################################################

  vars:
      "vars" slist => getindices(runenv);
      "$(vars)" string => "$(runenv[$(vars)])";
      # often you need a unique value for the current run through a
      # bundle, especially if you use if_repaired and such.  The
      # canon_prefix will give you that.
      "canon_prefix" string => canonify("$(prefix)");
      "dcbundle" string => concat("[$(metadata[name])] ", $(this.namespace), ':', $(this.bundle));
      "prefixes" slist => { "show", "exec", "path" };

    verbose::
      # pretty-print the authors and dependencies
      "dependencies" string => format("%S", "metadata[depends]");
      "authors" string => format("%S", "metadata[authors]");

    not_test::
      "exec_prefix" string => "", policy => "free";
      "show_prefix" string => "", policy => "free";
      "path_prefix" string => "", policy => "free";

    test::
      "exec_prefix" string => "$(default:paths.path[echo]) ", policy => "free";
      "show_prefix" string => "$(default:paths.path[grep]) . ", policy => "free";
      "path_prefix" string => "/tmp", policy => "free";

  classes:
      "$(vars)" expression => classmatch("$($(vars))");
      "not_$(vars)" not => classmatch("$($(vars))");
      "have_$(prefixes)_prefix" expression => isvariable("$(prefixes)_prefix");

  reports:
    verbose::
      "$(dcbundle): $(metadata[name]) license = $(metadata[license])";
      "$(dcbundle): $(metadata[name]) dependencies = $(dependencies)";
      "$(dcbundle): $(metadata[name]) version $(metadata[version]) by $(authors) starting up...";

      "$(dcbundle): imported environment var '$(vars)' with value '$($(vars))'";

      "$(dcbundle): imported environment class '$(vars)' because '$($(vars))' was true"
      ifvarclass => "$(vars)";

      "$(dcbundle): the $(prefixes)_prefix for runenv $(runenv) is '$($(prefixes)_prefix)'"
      ifvarclass => "have_$(prefixes)_prefix";

    verbose::
      # use the "verbose" context to show the sketch operation (for the user)
      "$(dcbundle): running in verbose mode";
    test::
       # use the "test" context to help debug the sketch (for the developer)
       "$(dcbundle): running in test mode";

##############################################################################
## end of template                                                          ##
##############################################################################
  vars:
      # call the sample.sh script
      "sample_return" string => execresult(concat($(exec_prefix),
                                                  $(this.promise_dirname),
                                                  "/scripts/sample.sh"),
                                           "useshell");

      "mylist_str" string => format("%S", mylist);
      "myarray_str" string => format("%S", myarray);

  commands:
      # call a module included with the bundle
      "$(this.promise_dirname)/modules/mymodule"
      module => "true";

  reports:
    cfengine::
      # This will define localclass with a locally meaningful prefix
      # every time (otherwise, localclass will be global and will be
      # defined with the same name every time).
      "$(this.bundle): Hello there"
      classes => default:if_repaired("$(canon_prefix)localclass");

      # And this will use the localclass
      "$(this.bundle): Hello back"
      ifvarclass => "$(canon_prefix)localclass";

      "$(this.bundle): running the external sample script gave us $(sample_return)";

      "$(this.bundle): got myboolean=$(myboolean)";
      "$(this.bundle): got mytype=$(mytype)";
      "$(this.bundle): got myip=$(myip)";
      "$(this.bundle): got mylist=$(mylist_str)";
      "$(this.bundle): got myarray=$(myarray_str)";

      "[anything I want to return goes here]" bundle_return_value_index => "myreturn";
      "[anything else I want to return goes here]" bundle_return_value_index => "myreturn2";

}
